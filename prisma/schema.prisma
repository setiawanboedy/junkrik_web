// Model untuk Schedule
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  businessName String
  address     String
  phone       String
  wasteType   String?
  wasteVolume Int?
  role        String?
  status      String   @default("ACTIVE") // ACTIVE, SUSPENDED, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  schedules       Schedule[]
  pickups         Pickup[] @relation("UserPickups")
  driverPickups   Pickup[] @relation("DriverPickups")
  reports         Report[]
  rewardHistories RewardHistory[]
}

model Schedule {
  id          String   @id @default(uuid())
  userId      String
  dayOfWeek   Int      // 0=Sunday, 1=Monday, etc.
  time        String   // Format: "HH:MM"
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pickups     Pickup[]
}

model Pickup {
  id                  String   @id @default(uuid())
  userId              String
  driverId            String?   // assigned driver
  scheduleId          String?
  pickupDate          DateTime
  wasteTypes          String[] // ['PLASTIC', 'ORGANIC', 'PAPER', 'METAL', 'GLASS', 'MIXED']
  estimatedWeight     Float?   // kg
  actualWeight        Float?   // kg  
  status              String   @default("PENDING") // PENDING, CONFIRMED, IN_PROGRESS, COMPLETED, CANCELLED, MISSED
  address             Json     // {street, city, postalCode, notes}
  specialInstructions String?
  photoUrl            String?   // URL of uploaded photo
  driverNotes         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  user                User      @relation("UserPickups", fields: [userId], references: [id], onDelete: Cascade)
  driver              User?     @relation("DriverPickups", fields: [driverId], references: [id], onDelete: SetNull)
  schedule            Schedule? @relation(fields: [scheduleId], references: [id], onDelete: SetNull)
}

model Report {
  id                  String   @id @default(uuid())
  userId              String
  year                Int
  month               Int
  type                String   @default("MONTHLY") // MONTHLY, QUARTERLY, ANNUAL
  totalPickups        Int      @default(0)
  totalWeight         Float    @default(0) // kg
  recycledWeight      Float    @default(0) // kg
  recyclingRate       Float    @default(0) // percentage
  plasticCredits      Float    @default(0) // kg
  costSavings         Float    @default(0) // Rupiah
  wasteTypeBreakdown  Json     @default("{}") // breakdown by waste type
  generatedAt         DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, year, month, type])
}

model Reward {
  id             String   @id @default(uuid())
  name           String
  description    String
  requiredCredit Float
  imageUrl       String?
  available      Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  histories      RewardHistory[]
}

model RewardHistory {
  id         String   @id @default(uuid())
  userId     String
  rewardId   String
  redeemedAt DateTime @default(now())
  status     RewardStatus @default(PENDING)
  code       String?
  expiredAt  DateTime?
  user       User     @relation(fields: [userId], references: [id])
  reward     Reward   @relation(fields: [rewardId], references: [id])
}

enum RewardStatus {
  PENDING
  APPROVED
  REJECTED
}
